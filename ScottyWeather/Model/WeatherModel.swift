//
//  WeatherModel.swift
//  ScottyWeather
//
//  Created by PATTY, SCOTT on 4/28/25.
//
import _math
import Foundation

struct WeatherModel {
    init(temperature: Int, location: LocationModel, windSpeed: Int, windDirection: WindDirection, humidity: Float, cloudCover: Float) {
        self.temperature = temperature
        self.location = location
        self.windSpeed = windSpeed
        self.windDirection = windDirection
        self.humidity = humidity
        self.cloudCover = cloudCover
    }
    public var temperature: Int
    public var location: LocationModel
    public var windSpeed: Int
    public var windDirection: WindDirection
    public var humidity: Float
    public var cloudCover: Float
    
}
// AUTO GENERATED BY QUICKTYPE
struct WeatherRawModel: Codable {
    let coord: Coord
    let weather: [Weather]
    let base: String
    let main: Main
    let visibility: Int
    let wind: Wind
    let clouds: Clouds
    let dt: Int
    let sys: Sys
    let timezone, id: Int
    let name: String
    let cod: Int
}

// MARK: - Clouds
struct Clouds: Codable {
    let all: Int
}

// MARK: - Coord
struct Coord: Codable {
    let lon, lat: Double
}

// MARK: - Main
struct Main: Codable {
    let temp, feelsLike, tempMin, tempMax: Double
    let pressure, humidity, seaLevel, grndLevel: Int

    enum CodingKeys: String, CodingKey {
        case temp
        case feelsLike = "feels_like"
        case tempMin = "temp_min"
        case tempMax = "temp_max"
        case pressure, humidity
        case seaLevel = "sea_level"
        case grndLevel = "grnd_level"
    }
}

// MARK: - Sys
struct Sys: Codable {
    let type, id: Int?
    let country: String?
    let sunrise, sunset: Int
}

// MARK: - Weather
struct Weather: Codable {
    let id: Int
    let main, description : String
}

// MARK: - Wind
struct Wind: Codable {
    let speed: Double
    let deg: Int
}

// END AUTO GENERATION
enum WindDirection: String, CaseIterable {
    case n, nne, ne, ene, e, ese, se, sse, s, ssw, sw, wsw, w, wnw, nw, nnw
    init(degrees: Int) {
        let allCases = AllCases()
        // Calculates the wind direction abbr from hell
        let index: Int = Int(round((Double(degrees) / (360.0 / Double(allCases.count))), )) % AllCases().count
        self = AllCases()[index]
    }
    public var Value: String {
        return rawValue.uppercased()
    }
}

